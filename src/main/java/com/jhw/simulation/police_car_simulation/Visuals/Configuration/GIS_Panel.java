/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Visuals.Configuration;

import PoliceCarsSimulation.SimulationMain;
import Reimplementations.ShapeFileReviewer;
import Inner.AreaColor_Class;
import Utils.Utility_Class;
import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.LinkedList;
import javax.swing.DefaultCellEditor;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.plaf.basic.BasicComboBoxUI;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author Margaret Sánchez Martínez
 */
public class GIS_Panel extends javax.swing.JPanel {

    private final LinkedList<String> geodata = getFilesSHP();
    private final LinkedList<String> xmldata = getFilesXML();
    private final LinkedList<String> roads = new LinkedList<>();
    private final LinkedList<String> areas = new LinkedList<>();

    public GIS_Panel() {
        initComponents();
        locateGEOData();
        locateXMLData();
        activateComboInTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBoxUrlRoads = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableAreas = new javax.swing.JTable();
        jComboBoxMCLPSolution = new javax.swing.JComboBox();

        setBackground(new java.awt.Color(255, 255, 255));

        jComboBoxUrlRoads.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jComboBoxUrlRoads.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione" }));
        jComboBoxUrlRoads.setToolTipText("Seleccione el fichero con la información de las calles");
        jComboBoxUrlRoads.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Calles", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N
        jComboBoxUrlRoads.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxUrlRoadsItemStateChanged(evt);
            }
        });

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Áreas auxiliares", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        jTableAreas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Selecc", "Nombre", "Color"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableAreas.setRowHeight(18);
        jScrollPane1.setViewportView(jTableAreas);
        if (jTableAreas.getColumnModel().getColumnCount() > 0) {
            jTableAreas.getColumnModel().getColumn(0).setMinWidth(50);
            jTableAreas.getColumnModel().getColumn(0).setPreferredWidth(50);
            jTableAreas.getColumnModel().getColumn(0).setMaxWidth(50);
            jTableAreas.getColumnModel().getColumn(2).setMinWidth(100);
            jTableAreas.getColumnModel().getColumn(2).setPreferredWidth(100);
            jTableAreas.getColumnModel().getColumn(2).setMaxWidth(100);
        }

        jComboBoxMCLPSolution.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jComboBoxMCLPSolution.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione" }));
        jComboBoxMCLPSolution.setToolTipText("Seleccione el fichero con la solución a simular");
        jComboBoxMCLPSolution.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Solucion XML", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBoxUrlRoads, 0, 424, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jComboBoxMCLPSolution, javax.swing.GroupLayout.Alignment.TRAILING, 0, 424, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jComboBoxUrlRoads, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jComboBoxMCLPSolution, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(113, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBoxUrlRoadsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxUrlRoadsItemStateChanged
        updateTableAreas();
    }//GEN-LAST:event_jComboBoxUrlRoadsItemStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox jComboBoxMCLPSolution;
    private javax.swing.JComboBox jComboBoxUrlRoads;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableAreas;
    // End of variables declaration//GEN-END:variables

    /**
     *
     */
    private void locateGEOData() {
        try {
            for (String st : geodata) {
                URL url = new URL("file", null, SimulationMain.cfg.getUrlGIS() + "/" + st + ".shp");
                int shpType = ShapeFileReviewer.getSHPType(url);
                areas.add(st);
                if (shpType == ShapeFileReviewer.POLYLINE) {
                    roads.add(st);
                }
            }

            Utility_Class.updateComboBox(jComboBoxUrlRoads, roads);//locate the roads
            updateTableAreas();
        } catch (MalformedURLException e) {
            Utility_Class.jopError("Error cargando los ficheros shape con la información geo-espacial. " + e.getMessage());
        }
    }

    /**
     *
     */
    private void locateXMLData() {
        try {
            Utility_Class.updateComboBox(jComboBoxMCLPSolution, xmldata);//locate the xmls
            updateTableAreas();
        } catch (Exception e) {
            Utility_Class.jopError("Error cargando los ficheros xml de la solución. " + e.getMessage());
        }
    }

    /**
     * Read all the files in the designated folder of GIS and return the files
     * with the .shp extensions.</br>
     * It's no really files, we are treating with it's names.
     */
    private LinkedList<String> getFilesSHP() {
        LinkedList<String> filter = new LinkedList<>();//filter's files
        try {
            String[] all = new File(SimulationMain.cfg.getUrlGIS()).list();//list all the files in the GIS folder
            for (String act : all) {
                if (act.endsWith(".shp")) {//chech if the extensions is shp
                    filter.add(act.substring(0, act.length() - ".shp".length()));//add to the filter
                }
            }
        } catch (Exception e) {
            Utility_Class.jopError("Error cargando los ficheros GIS. " + e.getMessage());
        }

        return filter;//return the files
    }

    public String getSelectedRoad() {
        return (String) jComboBoxUrlRoads.getSelectedItem();
    }

    public String getSelectedXML() {
        return (String) jComboBoxMCLPSolution.getSelectedItem();
    }

    private void updateTableAreas() {
        if (jComboBoxUrlRoads.getSelectedItem() != null) {
            DefaultTableModel model = (DefaultTableModel) jTableAreas.getModel();
            model.setRowCount(0);
            for (String st : areas) {
                if (!st.matches((String) jComboBoxUrlRoads.getSelectedItem())) {
                    Object row[] = {false, st};
                    model.addRow(row);
                }
            }
        }
    }

    public LinkedList<AreaColor_Class> getSelectedAreas() {
        LinkedList<AreaColor_Class> aux = new LinkedList<>();
        for (int i = 0; i < jTableAreas.getRowCount(); i++) {
            if ((boolean) jTableAreas.getValueAt(i, 0)) {//is marked
                String area = (String) jTableAreas.getValueAt(i, 1);
                String color = (String) jTableAreas.getValueAt(i, 2);
                aux.add(new AreaColor_Class(area, color));
            }
        }
        return aux;
    }

    private void activateComboInTable() {
        DefaultComboBoxModel comboModel = new DefaultComboBoxModel(SimulationMain.cfg.getColorsAvailables());
        JComboBox combo = new JComboBox();
        combo.setModel(comboModel);
        TableColumn col = jTableAreas.getColumnModel().getColumn(2);
        col.setCellEditor(new DefaultCellEditor(combo));
    }

    /**
     * Read all the files in the designated folder of GIS and return the files
     * with the .shp extensions.</br>
     * It's no really files, we are treating with it's names.
     */
    private LinkedList<String> getFilesXML() {
        LinkedList<String> filter = new LinkedList<>();//filter's files
        try {
            String[] all = new File(SimulationMain.cfg.getUrlXMLData()).list();//list all the files in the GIS folder
            for (String act : all) {
                if (act.endsWith(".xml")) {//chech if the extensions is shp
                    filter.add(act);//add to the filter
                }
            }
        } catch (Exception e) {
            Utility_Class.jopError("Error cargando los ficheros XML. " + e.getMessage());
        }
        return filter;//return the files
    }
}
